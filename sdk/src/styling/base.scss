/* CSS Mobile Reset */
*, *:after, *:before {
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -webkit-user-select: none;
    -webkit-touch-callout: none;
    -webkit-user-drag: none;
}

html, body
{
    margin: 0;
    padding: 0;
    border: 0;
    width: 100%;
    height: 100%;
}

body
{
    font-family: $font1;
    line-height:1.5;
    font-size:16px;
    background: $background-color;
    color: #000;
    word-wrap: break-word;
    -webkit-text-size-adjust: none;
}

h1, h2, h3, h4, h5, h6{ font-weight: normal; }

ul { list-style-type: none; padding: 0; margin: 0}

p img { float: left; margin: 0 10px 5px 0; padding: 0; }

img { border: 0; }

table { width:auto; border-collapse: collapse;border-spacing: 0; }

.cc-link{
    text-decoration: underline;
}

.cc-clearfix, %cc-clearfix{
    content: "";
    display: table;
    clear: both;
}

//some generic helper classes

.cc-unstyled{

    body, div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, code, form, fieldset, legend, input, textarea, p, blockquote, th, td{
        margin: 0;
        padding: 0;
    }

    h1, h2, h3, h4, h5, h6{ font-weight: normal; font-size: 100%; }

    address, caption, cite, code, dfn, em, strong, th, var {
        font-style: normal;
        font-weight: normal;
    }
}


.cc-full-width-height, %cc-full-width-height{
    width: 100%;
    height: 100%;
    position:relative;
}

.cc-expand-only, %cc-expand-only{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

.cc-dock-left, %cc-dock-left{
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
}

.cc-dock-right, %cc-dock-right{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
}

.cc-dock-bottom, %cc-dock-bottom{
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
}

.cc-expand{
    @extend %cc-full-width-height;
    @extend %cc-expand-only;
}

.cc-scrollable-vertical, %cc-scrollable-vertical {
    overflow-y: auto;
    overflow-x: hidden;
    -webkit-overflow-scrolling: touch;
}

.cc-supports-position-fixed .cc-scroller--if-fixed,
.cc-supports-position-fixed.cc-scroller--if-fixed{
    @extend %cc-scrollable-vertical
}

//For the fixed toolbar scroller we set overflow-x to hidden to avoid horizontal
//scrollbars on iOS. However, Android 2 also supports the fixed toolbar scroller
//but has poor overflow support which causes the page to not scroll at all if
//overflow-x:hidden is applied. Thankfully Android does not suffer from that
//horizontal toolbars bug so that it does not need the fix, in the first place.
//So here we take back the overflow-x:hidden thing for Android 2.

//On first glance it might seem odd why we don't explicitly set the overflow-x:hidden
//for iOS instead of reverting it for Android 2. However, on a second thought
//it feels sane to set the overflow-x:hidden if we wouldn't suffer from that bug.
//For instance, if a customer injects ugly markup/css into a product page, we
//would rather have the content cut off than suffering from scroll bars.

.cc-supports-position-fixed.cc-os-android.cc-osv-2 .cc-scroller--if-fixed,
.cc-supports-position-fixed.cc-os-android.cc-osv-2.cc-scroller--if-fixed{
    overflow: visible;
}

.cc-container, %cc-container{
    display: -webkit-box;
}

.cc-body{
    @extend %cc-container;
    overflow: hidden;
    -webkit-box-flex: 1;
    min-width: 100%;
    min-height: 100%;
    position: relative;
}

.cc-toolbar{
    @extend %cc-container;
    height: $cc-header---height;
    width: 100%;
}

.cc-footer{
    height: $cc-header---height;
    width: 100%;
    background: #a456a4
}

.cc-docking-vertical{
    display: -webkit-box;
    -webkit-box-flex: 1;
    -webkit-box-orient: vertical;
    min-width: 100%;
    min-height: 100%;
}

.cc-grid-cell, %cc-grid-cell{
    position: relative;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-box-align: stretch;
    -webkit-box-flex: 1;
}

.cc-grid-row, %cc-grid-row{
    -webkit-box-flex: 1;
    display: -webkit-box;
    -webkit-box-orient: horizontal;
    -webkit-box-align: stretch;
    width: 100%;
}

.cc-grid, %cc-grid{
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-box-align: stretch;
    height: 100%;
}

.cc-full-width-height .cc-view-wrapper{
    // some tweaks for less flickering
    -webkit-backface-visibility: hidden;
    -webkit-transform-style: preserve-3d;
    width:100%;
}

//On Android 2, those two styles cause the page to jump around
//when focusing input elements. This totaly breaks things like
//checkout forms for such users. We normally set those for better
//performance but we disable them for Android 2.x
//https://github.com/scottjehl/Device-Bugs/issues/32
.cc-os-android.cc-osv-2{
    .cc-full-width-height .cc-view-wrapper{
        -webkit-backface-visibility: initial;
        -webkit-transform-style: initial;
    }
}

//if we have a fixed toolbar, we need to push the view-wrapper
//45px to the bottom (the height of the toolbar)
.cc-supports-position-fixed{
    .cc-view-wrapper{
        padding-top: $cc-header---height;
    }
}

.cc-view-wrapper{
    padding: $primary-padding;
    height: 100%;
    color: $background-text-color;
}

.cc-view-wrapper--unpadded{
    @extend .cc-view-wrapper;
    padding-left: 0;
    padding-right: 0;
}

//generic seperator lines that magically allways look awesome
//(it could be tweaked for black and white though)
.cc-line-seperator, %cc-line-seperator{
    border-top: 1px solid darken($background-color, 10%);
    border-bottom: 1px solid lighten($background-color, 10%);
}

.cc-padded-line-seperator{
    @extend %cc-line-seperator;
    margin-bottom: 10px;
}

.cc-on-background, %cc-on-background{
    color: $background-text-color;
    border-color: $background-border-color;
}

.cc-on-content, %cc-on-content{
    color: $content-text-color;
    border-color: $content-border-color;
}
